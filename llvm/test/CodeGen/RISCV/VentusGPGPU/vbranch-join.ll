; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv32 -mcpu=ventus-gpgpu -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=VENTUS %s

; Function Attrs: convergent mustprogress nofree norecurse nounwind willreturn memory(none) vscale_range(1,2048)
define dso_local i32 @branch(i32 noundef %dim) local_unnamed_addr {
; VENTUS-LABEL: branch:
; VENTUS:       # %bb.0: # %entry
; VENTUS-NEXT:    addi sp, sp, 4
; VENTUS-NEXT:    .cfi_def_cfa_offset 4
; VENTUS-NEXT:    sw ra, -4(sp) # 4-byte Folded Spill
; VENTUS-NEXT:    .cfi_offset ra, 0
; VENTUS-NEXT:    vmv.v.x v0, zero
; VENTUS-NEXT:    call _Z13get_global_idj
; VENTUS-NEXT:    li t0, 13
; VENTUS-NEXT:    li t1, 14
; VENTUS-NEXT:    vmv.v.x v2, t1
; VENTUS-NEXT:    vmv.v.x v1, t0
; VENTUS-NEXT:  .Lpcrel_hi0:
; VENTUS-NEXT:    auipc t1, %pcrel_hi(.LBB0_3)
; VENTUS-NEXT:    setrpc zero, t1, %pcrel_lo(.Lpcrel_hi0)
; VENTUS-NEXT:    vblt v0, v2, .LBB0_3
; VENTUS-NEXT:  # %bb.1: # %if.else
; VENTUS-NEXT:    li t0, 18
; VENTUS-NEXT:    vmv.v.x v2, t0
; VENTUS-NEXT:    vmv.v.x v1, t0
; VENTUS-NEXT:  .Lpcrel_hi1:
; VENTUS-NEXT:    auipc t1, %pcrel_hi(.LBB0_3)
; VENTUS-NEXT:    setrpc zero, t1, %pcrel_lo(.Lpcrel_hi1)
; VENTUS-NEXT:    vbltu v0, v2, .LBB0_3
; VENTUS-NEXT:  # %bb.2: # %if.end3
; VENTUS-NEXT:    li t0, 4
; VENTUS-NEXT:    vmv.v.x v0, t0
; VENTUS-NEXT:    call _Z13get_global_idj
; VENTUS-NEXT:    vadd.vx v1, v0, zero
; VENTUS-NEXT:  .LBB0_3: # %cleanup
; VENTUS-NEXT:    # Label of block must be emitted
; VENTUS-NEXT:    join zero, zero, 0
; VENTUS-NEXT:    vadd.vx v0, v1, zero
; VENTUS-NEXT:    lw ra, -4(sp) # 4-byte Folded Reload
; VENTUS-NEXT:    addi sp, sp, -4
; VENTUS-NEXT:    ret
entry:
  %call = call i32 @_Z13get_global_idj(i32 noundef 0)
  %cmp = icmp slt i32 %call, 14
  br i1 %cmp, label %cleanup, label %if.else

if.else:                                          ; preds = %entry
  %cmp1 = icmp ult i32 %call, 18
  br i1 %cmp1, label %cleanup, label %if.end3

if.end3:                                          ; preds = %if.else
  %call4 = call i32 @_Z13get_global_idj(i32 noundef 4)
  br label %cleanup

cleanup:                                          ; preds = %if.else, %entry, %if.end3
  %retval.0 = phi i32 [ %call4, %if.end3 ], [ 13, %entry ], [ 18, %if.else ]
  ret i32 %retval.0
}

define dso_local ventus_kernel void @loop_branch(ptr addrspace(1) nocapture noundef align 4 %A, ptr addrspace(1) nocapture noundef readonly align 4 %B) {
; VENTUS-LABEL: loop_branch:
; VENTUS:       # %bb.0: # %entry
; VENTUS-NEXT:    addi sp, sp, 8
; VENTUS-NEXT:    .cfi_def_cfa_offset 8
; VENTUS-NEXT:    sw ra, -8(sp) # 4-byte Folded Spill
; VENTUS-NEXT:    .cfi_offset ra, 0
; VENTUS-NEXT:    sw a0, -4(sp) # 4-byte Folded Spill
; VENTUS-NEXT:    vmv.v.x v0, zero
; VENTUS-NEXT:    call _Z13get_global_idj
; VENTUS-NEXT:    vmv.v.x v1, zero
; VENTUS-NEXT:  .Lpcrel_hi2:
; VENTUS-NEXT:    auipc t1, %pcrel_hi(.LBB1_3)
; VENTUS-NEXT:    setrpc zero, t1, %pcrel_lo(.Lpcrel_hi2)
; VENTUS-NEXT:    vbeq v0, v1, .LBB1_3
; VENTUS-NEXT:  # %bb.1: # %for.body.lr.ph
; VENTUS-NEXT:    lw t1, -4(sp) # 4-byte Folded Reload
; VENTUS-NEXT:    lw t0, 0(t1)
; VENTUS-NEXT:    lw t1, 4(t1)
; VENTUS-NEXT:    vmv.v.x v1, t0
; VENTUS-NEXT:    vsll.vi v3, v0, 2
; VENTUS-NEXT:    vadd.vv v1, v1, v3
; VENTUS-NEXT:    vlw12.v v2, 0(v1)
; VENTUS-NEXT:    vmv.v.x v4, t1
; VENTUS-NEXT:    vadd.vv v3, v4, v3
; VENTUS-NEXT:    vmv.v.x v5, zero
; VENTUS-NEXT:  .LBB1_2: # %for.body
; VENTUS-NEXT:    # =>This Inner Loop Header: Depth=1
; VENTUS-NEXT:    vlw12.v v4, 0(v3)
; VENTUS-NEXT:    vadd.vv v2, v2, v4
; VENTUS-NEXT:    vsub12.vi v0, v0, 1
; VENTUS-NEXT:    vsw12.v v2, 0(v1)
; VENTUS-NEXT:  .Lpcrel_hi3:
; VENTUS-NEXT:    auipc t1, %pcrel_hi(.LBB1_3)
; VENTUS-NEXT:    setrpc zero, t1, %pcrel_lo(.Lpcrel_hi3)
; VENTUS-NEXT:    vbne v0, v5, .LBB1_2
; VENTUS-NEXT:  .LBB1_3: # %for.cond.cleanup
; VENTUS-NEXT:    # Label of block must be emitted
; VENTUS-NEXT:    join zero, zero, 0
; VENTUS-NEXT:    lw ra, -8(sp) # 4-byte Folded Reload
; VENTUS-NEXT:    addi sp, sp, -8
; VENTUS-NEXT:    ret
entry:
  %call = call i32 @_Z13get_global_idj(i32 noundef 0)
  %cmp5.not = icmp eq i32 %call, 0
  br i1 %cmp5.not, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %arrayidx = getelementptr inbounds i32, ptr addrspace(1) %B, i32 %call
  %arrayidx1 = getelementptr inbounds i32, ptr addrspace(1) %A, i32 %call
  %.pre = load i32, ptr addrspace(1) %arrayidx1, align 4
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  ret void

for.body:                                         ; preds = %for.body.lr.ph, %for.body
  %0 = phi i32 [ %.pre, %for.body.lr.ph ], [ %add, %for.body ]
  %i.06 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %for.body ]
  %1 = load i32, ptr addrspace(1) %arrayidx, align 4
  %add = add nsw i32 %0, %1
  store i32 %add, ptr addrspace(1) %arrayidx1, align 4
  %inc = add nuw nsw i32 %i.06, 1
  %exitcond.not = icmp eq i32 %inc, %call
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body
}

define dso_local i32 @branch_in_branch(i32 noundef %dim) local_unnamed_addr {
; VENTUS-LABEL: branch_in_branch:
; VENTUS:       # %bb.0: # %entry
; VENTUS-NEXT:    addi sp, sp, 4
; VENTUS-NEXT:    .cfi_def_cfa_offset 4
; VENTUS-NEXT:    addi tp, tp, 4
; VENTUS-NEXT:    .cfi_def_cfa_offset 4
; VENTUS-NEXT:    regext zero, zero, 1
; VENTUS-NEXT:    vmv.v.x v32, tp
; VENTUS-NEXT:    sw ra, -4(sp) # 4-byte Folded Spill
; VENTUS-NEXT:    regext zero, zero, 72
; VENTUS-NEXT:    vsw.v v33, -4(v32) # 4-byte Folded Spill
; VENTUS-NEXT:    .cfi_offset ra, 0
; VENTUS-NEXT:    .cfi_offset v33.l, 0
; VENTUS-NEXT:    vmv.v.x v0, zero
; VENTUS-NEXT:    call _Z13get_global_idj
; VENTUS-NEXT:    regext zero, zero, 1
; VENTUS-NEXT:    vadd.vx v33, v0, zero
; VENTUS-NEXT:    li t0, 13
; VENTUS-NEXT:    li t1, 14
; VENTUS-NEXT:    vmv.v.x v1, t1
; VENTUS-NEXT:    vmv.v.x v0, t0
; VENTUS-NEXT:  .Lpcrel_hi4:
; VENTUS-NEXT:    auipc t1, %pcrel_hi(.LBB2_7)
; VENTUS-NEXT:    setrpc zero, t1, %pcrel_lo(.Lpcrel_hi4)
; VENTUS-NEXT:    regext zero, zero, 64
; VENTUS-NEXT:    vblt v33, v1, .LBB2_7
; VENTUS-NEXT:  # %bb.1: # %if.else
; VENTUS-NEXT:    li t0, 17
; VENTUS-NEXT:    vmv.v.x v0, t0
; VENTUS-NEXT:  .Lpcrel_hi5:
; VENTUS-NEXT:    auipc t1, %pcrel_hi(.LBB2_7)
; VENTUS-NEXT:    setrpc zero, t1, %pcrel_lo(.Lpcrel_hi5)
; VENTUS-NEXT:    regext zero, zero, 8
; VENTUS-NEXT:    vbltu v0, v33, .LBB2_4
; VENTUS-NEXT:  # %bb.2: # %if.then2
; VENTUS-NEXT:    li t0, 1
; VENTUS-NEXT:    vmv.v.x v0, t0
; VENTUS-NEXT:    call _Z13get_global_idj
; VENTUS-NEXT:  .Lpcrel_hi6:
; VENTUS-NEXT:    auipc t1, %pcrel_hi(.LBB2_6)
; VENTUS-NEXT:    setrpc zero, t1, %pcrel_lo(.Lpcrel_hi6)
; VENTUS-NEXT:    regext zero, zero, 8
; VENTUS-NEXT:    vblt v0, v33, .LBB2_5
; VENTUS-NEXT:  # %bb.3: # %if.then2
; VENTUS-NEXT:    li t0, 23
; VENTUS-NEXT:    j .LBB2_6
; VENTUS-NEXT:  .LBB2_4: # %if.end7
; VENTUS-NEXT:    li t0, 4
; VENTUS-NEXT:    vmv.v.x v0, t0
; VENTUS-NEXT:    call _Z13get_global_idj
; VENTUS-NEXT:    j .LBB2_7
; VENTUS-NEXT:  .LBB2_5:
; VENTUS-NEXT:    li t0, 12
; VENTUS-NEXT:  .LBB2_6: # %cleanup9
; VENTUS-NEXT:    # Label of block must be emitted
; VENTUS-NEXT:    join zero, zero, 0
; VENTUS-NEXT:    vmv.v.x v0, t0
; VENTUS-NEXT:  .LBB2_7: # %cleanup9
; VENTUS-NEXT:    # Label of block must be emitted
; VENTUS-NEXT:    join zero, zero, 0
; VENTUS-NEXT:    lw ra, -4(sp) # 4-byte Folded Reload
; VENTUS-NEXT:    regext zero, zero, 9
; VENTUS-NEXT:    vlw.v v33, -4(v32) # 4-byte Folded Reload
; VENTUS-NEXT:    addi sp, sp, -4
; VENTUS-NEXT:    addi tp, tp, -4
; VENTUS-NEXT:    regext zero, zero, 1
; VENTUS-NEXT:    vmv.v.x v32, tp
; VENTUS-NEXT:    ret
entry:
  %call = call i32 @_Z13get_global_idj(i32 noundef 0)
  %cmp = icmp slt i32 %call, 14
  br i1 %cmp, label %cleanup9, label %if.else

if.else:                                          ; preds = %entry
  %cmp1 = icmp ult i32 %call, 18
  br i1 %cmp1, label %if.then2, label %if.end7

if.then2:                                         ; preds = %if.else
  %call3 = call i32 @_Z13get_global_idj(i32 noundef 1)
  %cmp4 = icmp sgt i32 %call, %call3
  %. = select i1 %cmp4, i32 12, i32 23
  br label %cleanup9

if.end7:                                          ; preds = %if.else
  %call8 = call i32 @_Z13get_global_idj(i32 noundef 4)
  br label %cleanup9

cleanup9:                                         ; preds = %entry, %if.end7, %if.then2
  %retval.1 = phi i32 [ %., %if.then2 ], [ %call8, %if.end7 ], [ 13, %entry ]
  ret i32 %retval.1
}

; Function Attrs: convergent nofree norecurse nounwind memory(argmem: readwrite) vscale_range(1,2048)
define dso_local ventus_kernel void @double_loop(ptr addrspace(1) nocapture noundef align 4 %A, ptr addrspace(1) nocapture noundef readonly align 4 %B) {
; VENTUS-LABEL: double_loop:
; VENTUS:       # %bb.0: # %entry
; VENTUS-NEXT:    addi sp, sp, 8
; VENTUS-NEXT:    .cfi_def_cfa_offset 8
; VENTUS-NEXT:    sw ra, -8(sp) # 4-byte Folded Spill
; VENTUS-NEXT:    .cfi_offset ra, 0
; VENTUS-NEXT:    sw a0, -4(sp) # 4-byte Folded Spill
; VENTUS-NEXT:    vmv.v.x v0, zero
; VENTUS-NEXT:    call _Z13get_global_idj
; VENTUS-NEXT:    vmv.v.x v1, zero
; VENTUS-NEXT:  .Lpcrel_hi7:
; VENTUS-NEXT:    auipc t1, %pcrel_hi(.LBB3_5)
; VENTUS-NEXT:    setrpc zero, t1, %pcrel_lo(.Lpcrel_hi7)
; VENTUS-NEXT:    vbeq v0, v1, .LBB3_5
; VENTUS-NEXT:  # %bb.1: # %for.cond1.preheader.lr.ph
; VENTUS-NEXT:    li t0, 0
; VENTUS-NEXT:    lw t2, -4(sp) # 4-byte Folded Reload
; VENTUS-NEXT:    lw t1, 0(t2)
; VENTUS-NEXT:    lw t2, 4(t2)
; VENTUS-NEXT:    vmv.v.x v1, t1
; VENTUS-NEXT:    vsll.vi v3, v0, 2
; VENTUS-NEXT:    vadd.vv v1, v1, v3
; VENTUS-NEXT:    vlw12.v v2, 0(v1)
; VENTUS-NEXT:    vmv.v.x v4, t2
; VENTUS-NEXT:    vadd.vv v3, v4, v3
; VENTUS-NEXT:    vmv.v.x v6, zero
; VENTUS-NEXT:  .LBB3_2: # %for.cond1.preheader
; VENTUS-NEXT:    # =>This Loop Header: Depth=1
; VENTUS-NEXT:    # Child Loop BB3_3 Depth 2
; VENTUS-NEXT:    vadd.vx v4, v0, zero
; VENTUS-NEXT:  .LBB3_3: # %for.body4
; VENTUS-NEXT:    # Parent Loop BB3_2 Depth=1
; VENTUS-NEXT:    # => This Inner Loop Header: Depth=2
; VENTUS-NEXT:    vlw12.v v5, 0(v3)
; VENTUS-NEXT:    vadd.vv v2, v2, v5
; VENTUS-NEXT:    vsub12.vi v4, v4, 1
; VENTUS-NEXT:    vsw12.v v2, 0(v1)
; VENTUS-NEXT:  .Lpcrel_hi8:
; VENTUS-NEXT:    auipc t1, %pcrel_hi(.LBB3_4)
; VENTUS-NEXT:    setrpc zero, t1, %pcrel_lo(.Lpcrel_hi8)
; VENTUS-NEXT:    vbne v4, v6, .LBB3_3
; VENTUS-NEXT:  .LBB3_4: # %for.cond1.for.cond.cleanup3_crit_edge
; VENTUS-NEXT:    # in Loop: Header=BB3_2 Depth=1
; VENTUS-NEXT:    # Label of block must be emitted
; VENTUS-NEXT:    join zero, zero, 0
; VENTUS-NEXT:    addi t0, t0, 1
; VENTUS-NEXT:    vmv.v.x v4, t0
; VENTUS-NEXT:  .Lpcrel_hi9:
; VENTUS-NEXT:    auipc t1, %pcrel_hi(.LBB3_5)
; VENTUS-NEXT:    setrpc zero, t1, %pcrel_lo(.Lpcrel_hi9)
; VENTUS-NEXT:    vbne v4, v0, .LBB3_2
; VENTUS-NEXT:  .LBB3_5: # %for.cond.cleanup
; VENTUS-NEXT:    # Label of block must be emitted
; VENTUS-NEXT:    join zero, zero, 0
; VENTUS-NEXT:    lw ra, -8(sp) # 4-byte Folded Reload
; VENTUS-NEXT:    addi sp, sp, -8
; VENTUS-NEXT:    ret
entry:
  %call = call i32 @_Z13get_global_idj(i32 noundef 0)
  %cmp16.not = icmp eq i32 %call, 0
  br i1 %cmp16.not, label %for.cond.cleanup, label %for.cond1.preheader.lr.ph

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %arrayidx = getelementptr inbounds i32, ptr addrspace(1) %B, i32 %call
  %arrayidx5 = getelementptr inbounds i32, ptr addrspace(1) %A, i32 %call
  %.pre.pre = load i32, ptr addrspace(1) %arrayidx5, align 4
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.cond1.preheader.lr.ph, %for.cond1.for.cond.cleanup3_crit_edge
  %.pre = phi i32 [ %.pre.pre, %for.cond1.preheader.lr.ph ], [ %add, %for.cond1.for.cond.cleanup3_crit_edge ]
  %i.017 = phi i32 [ 0, %for.cond1.preheader.lr.ph ], [ %inc7, %for.cond1.for.cond.cleanup3_crit_edge ]
  br label %for.body4

for.cond.cleanup:                                 ; preds = %for.cond1.for.cond.cleanup3_crit_edge, %entry
  ret void

for.cond1.for.cond.cleanup3_crit_edge:            ; preds = %for.body4
  %inc7 = add nuw nsw i32 %i.017, 1
  %exitcond18.not = icmp eq i32 %inc7, %call
  br i1 %exitcond18.not, label %for.cond.cleanup, label %for.cond1.preheader

for.body4:                                        ; preds = %for.cond1.preheader, %for.body4
  %0 = phi i32 [ %.pre, %for.cond1.preheader ], [ %add, %for.body4 ]
  %j.015 = phi i32 [ 0, %for.cond1.preheader ], [ %inc, %for.body4 ]
  %1 = load i32, ptr addrspace(1) %arrayidx, align 4
  %add = add nsw i32 %0, %1
  store i32 %add, ptr addrspace(1) %arrayidx5, align 4
  %inc = add nuw nsw i32 %j.015, 1
  %exitcond.not = icmp eq i32 %inc, %call
  br i1 %exitcond.not, label %for.cond1.for.cond.cleanup3_crit_edge, label %for.body4
}

; Function Attrs: convergent nofree norecurse nounwind memory(argmem: readwrite) vscale_range(1,2048)
define dso_local ventus_kernel void @loop_switch(ptr addrspace(1) nocapture noundef align 4 %A, ptr addrspace(1) nocapture noundef readonly align 4 %B) {
; VENTUS-LABEL: loop_switch:
; VENTUS:       # %bb.0: # %entry
; VENTUS-NEXT:    addi sp, sp, 8
; VENTUS-NEXT:    .cfi_def_cfa_offset 8
; VENTUS-NEXT:    sw ra, -8(sp) # 4-byte Folded Spill
; VENTUS-NEXT:    .cfi_offset ra, 0
; VENTUS-NEXT:    sw a0, -4(sp) # 4-byte Folded Spill
; VENTUS-NEXT:    vmv.v.x v0, zero
; VENTUS-NEXT:    call _Z13get_global_idj
; VENTUS-NEXT:    vmv.v.x v1, zero
; VENTUS-NEXT:  .Lpcrel_hi10:
; VENTUS-NEXT:    auipc t1, %pcrel_hi(.LBB4_9)
; VENTUS-NEXT:    setrpc zero, t1, %pcrel_lo(.Lpcrel_hi10)
; VENTUS-NEXT:    vbeq v0, v1, .LBB4_9
; VENTUS-NEXT:  # %bb.1: # %for.body.lr.ph
; VENTUS-NEXT:    li t0, 0
; VENTUS-NEXT:    lw t2, -4(sp) # 4-byte Folded Reload
; VENTUS-NEXT:    lw t1, 4(t2)
; VENTUS-NEXT:    lw t2, 0(t2)
; VENTUS-NEXT:    vmv.v.x v1, t1
; VENTUS-NEXT:    vmv.v.x v4, t2
; VENTUS-NEXT:    vsll.vi v2, v0, 2
; VENTUS-NEXT:    vadd.vv v1, v1, v2
; VENTUS-NEXT:    vadd.vv v2, v4, v2
; VENTUS-NEXT:    vadd.vi v3, v4, 8
; VENTUS-NEXT:    vadd.vi v4, v4, 4
; VENTUS-NEXT:    li t2, 1
; VENTUS-NEXT:    li s1, 2
; VENTUS-NEXT:    j .LBB4_5
; VENTUS-NEXT:  .LBB4_2: # %sw.default
; VENTUS-NEXT:    # in Loop: Header=BB4_5 Depth=1
; VENTUS-NEXT:    vlw12.v v6, 0(v1)
; VENTUS-NEXT:    vadd.vx v5, v2, zero
; VENTUS-NEXT:  .LBB4_3: # %for.inc.sink.split
; VENTUS-NEXT:    # in Loop: Header=BB4_5 Depth=1
; VENTUS-NEXT:    vlw12.v v7, 0(v5)
; VENTUS-NEXT:    vadd.vv v6, v7, v6
; VENTUS-NEXT:    vsw12.v v6, 0(v5)
; VENTUS-NEXT:  .LBB4_4: # %for.inc
; VENTUS-NEXT:    # in Loop: Header=BB4_5 Depth=1
; VENTUS-NEXT:    addi t0, t0, 1
; VENTUS-NEXT:    vmv.v.x v5, t0
; VENTUS-NEXT:  .Lpcrel_hi11:
; VENTUS-NEXT:    auipc t1, %pcrel_hi(.LBB4_9)
; VENTUS-NEXT:    setrpc zero, t1, %pcrel_lo(.Lpcrel_hi11)
; VENTUS-NEXT:    vbeq v0, v5, .LBB4_9
; VENTUS-NEXT:  .LBB4_5: # %for.body
; VENTUS-NEXT:    # =>This Inner Loop Header: Depth=1
; VENTUS-NEXT:    beqz t0, .LBB4_4
; VENTUS-NEXT:  # %bb.6: # %for.body
; VENTUS-NEXT:    # in Loop: Header=BB4_5 Depth=1
; VENTUS-NEXT:    vadd.vx v5, v4, zero
; VENTUS-NEXT:    vmv.v.x v6, s1
; VENTUS-NEXT:    beq t0, t2, .LBB4_3
; VENTUS-NEXT:  # %bb.7: # %for.body
; VENTUS-NEXT:    # in Loop: Header=BB4_5 Depth=1
; VENTUS-NEXT:    bne t0, s1, .LBB4_2
; VENTUS-NEXT:  # %bb.8: # %sw.bb4
; VENTUS-NEXT:    # in Loop: Header=BB4_5 Depth=1
; VENTUS-NEXT:    li t1, 23
; VENTUS-NEXT:    vadd.vx v5, v3, zero
; VENTUS-NEXT:    vmv.v.x v6, t1
; VENTUS-NEXT:    j .LBB4_3
; VENTUS-NEXT:  .LBB4_9: # %for.cond.cleanup
; VENTUS-NEXT:    # Label of block must be emitted
; VENTUS-NEXT:    join zero, zero, 0
; VENTUS-NEXT:    lw ra, -8(sp) # 4-byte Folded Reload
; VENTUS-NEXT:    addi sp, sp, -8
; VENTUS-NEXT:    ret
entry:
  %call = call i32 @_Z13get_global_idj(i32 noundef 0)
  %cmp21.not = icmp eq i32 %call, 0
  br i1 %cmp21.not, label %for.cond.cleanup, label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %entry
  %arrayidx7 = getelementptr inbounds i32, ptr addrspace(1) %B, i32 %call
  %arrayidx8 = getelementptr inbounds i32, ptr addrspace(1) %A, i32 %call
  %arrayidx5 = getelementptr inbounds i32, ptr addrspace(1) %A, i32 2
  %arrayidx2 = getelementptr inbounds i32, ptr addrspace(1) %A, i32 1
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.inc, %entry
  ret void

for.body:                                         ; preds = %for.body.lr.ph, %for.inc
  %i.022 = phi i32 [ 0, %for.body.lr.ph ], [ %inc, %for.inc ]
  switch i32 %i.022, label %sw.default [
    i32 0, label %for.inc
    i32 1, label %for.inc.sink.split
    i32 2, label %sw.bb4
  ]

sw.bb4:                                           ; preds = %for.body
  br label %for.inc.sink.split

sw.default:                                       ; preds = %for.body
  %0 = load i32, ptr addrspace(1) %arrayidx7, align 4
  br label %for.inc.sink.split

for.inc.sink.split:                               ; preds = %for.body, %sw.default, %sw.bb4
  %arrayidx2.sink24 = phi ptr addrspace(1) [ %arrayidx5, %sw.bb4 ], [ %arrayidx8, %sw.default ], [ %arrayidx2, %for.body ]
  %.sink23 = phi i32 [ 23, %sw.bb4 ], [ %0, %sw.default ], [ 2, %for.body ]
  %1 = load i32, ptr addrspace(1) %arrayidx2.sink24, align 4
  %add3 = add nsw i32 %1, %.sink23
  store i32 %add3, ptr addrspace(1) %arrayidx2.sink24, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.inc.sink.split, %for.body
  %inc = add nuw nsw i32 %i.022, 1
  %exitcond.not = icmp eq i32 %inc, %call
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body
}

define dso_local i32 @_Z13get_global_idj(i32 noundef %dim) local_unnamed_addr {
; VENTUS-LABEL: _Z13get_global_idj:
; VENTUS:       # %bb.0: # %entry
; VENTUS-NEXT:    addi sp, sp, 4
; VENTUS-NEXT:    .cfi_def_cfa_offset 4
; VENTUS-NEXT:    sw ra, -4(sp) # 4-byte Folded Spill
; VENTUS-NEXT:    .cfi_offset ra, 0
; VENTUS-NEXT:    li t0, 2
; VENTUS-NEXT:    vmv.v.x v1, t0
; VENTUS-NEXT:  .Lpcrel_hi12:
; VENTUS-NEXT:    auipc t1, %pcrel_hi(.LBB5_7)
; VENTUS-NEXT:    setrpc zero, t1, %pcrel_lo(.Lpcrel_hi12)
; VENTUS-NEXT:    vbeq v0, v1, .LBB5_4
; VENTUS-NEXT:  # %bb.1: # %entry
; VENTUS-NEXT:    li t0, 1
; VENTUS-NEXT:    vmv.v.x v1, t0
; VENTUS-NEXT:  .Lpcrel_hi13:
; VENTUS-NEXT:    auipc t1, %pcrel_hi(.LBB5_7)
; VENTUS-NEXT:    setrpc zero, t1, %pcrel_lo(.Lpcrel_hi13)
; VENTUS-NEXT:    vbeq v0, v1, .LBB5_5
; VENTUS-NEXT:  # %bb.2: # %entry
; VENTUS-NEXT:    vmv.v.x v1, zero
; VENTUS-NEXT:  .Lpcrel_hi14:
; VENTUS-NEXT:    auipc t1, %pcrel_hi(.LBB5_7)
; VENTUS-NEXT:    setrpc zero, t1, %pcrel_lo(.Lpcrel_hi14)
; VENTUS-NEXT:    vbne v0, v1, .LBB5_6
; VENTUS-NEXT:  # %bb.3: # %sw.bb
; VENTUS-NEXT:    call __builtin_riscv_global_id_x
; VENTUS-NEXT:    j .LBB5_7
; VENTUS-NEXT:  .LBB5_4: # %sw.bb3
; VENTUS-NEXT:    call __builtin_riscv_global_id_z
; VENTUS-NEXT:    j .LBB5_7
; VENTUS-NEXT:  .LBB5_5: # %sw.bb1
; VENTUS-NEXT:    call __builtin_riscv_global_id_y
; VENTUS-NEXT:    j .LBB5_7
; VENTUS-NEXT:  .LBB5_6:
; VENTUS-NEXT:    vmv.v.x v0, zero
; VENTUS-NEXT:  .LBB5_7: # %return
; VENTUS-NEXT:    # Label of block must be emitted
; VENTUS-NEXT:    join zero, zero, 0
; VENTUS-NEXT:    lw ra, -4(sp) # 4-byte Folded Reload
; VENTUS-NEXT:    addi sp, sp, -4
; VENTUS-NEXT:    ret
entry:
  switch i32 %dim, label %return [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb3
  ]

sw.bb:                                            ; preds = %entry
  %call = call i32 @__builtin_riscv_global_id_x()
  br label %return

sw.bb1:                                           ; preds = %entry
  %call2 = call i32 @__builtin_riscv_global_id_y()
  br label %return

sw.bb3:                                           ; preds = %entry
  %call4 = call i32 @__builtin_riscv_global_id_z()
  br label %return

return:                                           ; preds = %entry, %sw.bb3, %sw.bb1, %sw.bb
  %retval.0 = phi i32 [ %call4, %sw.bb3 ], [ %call2, %sw.bb1 ], [ %call, %sw.bb ], [ 0, %entry ]
  ret i32 %retval.0
}

; Function Attrs: convergent mustprogress nofree nounwind willreturn memory(none)
; Function Attrs: convergent
declare dso_local i32 @__builtin_riscv_global_id_x() local_unnamed_addr

; Function Attrs: convergent
declare dso_local i32 @__builtin_riscv_global_id_y() local_unnamed_addr

; Function Attrs: convergent
declare dso_local i32 @__builtin_riscv_global_id_z() local_unnamed_addr

