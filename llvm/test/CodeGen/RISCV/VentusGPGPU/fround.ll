; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv32 -mcpu=ventus-gpgpu  < %s \
; RUN:   | FileCheck -check-prefix=VENTUS %s

define float @test_fceil(float noundef %a) #0 {
; VENTUS-LABEL: test_fceil:
; VENTUS:	    frrm	t0
; VENTUS-NEXT:	fsrmi	3
; VENTUS-NEXT:	vfcvt.x.f.v	v1, v0
; VENTUS-NEXT:	vfcvt.f.x.v	v1, v1
; VENTUS-NEXT:	fsrm	t0
entry:
  %call = call float @llvm.ceil.f32(float noundef %a)
  ret float %call
}

define float @test_ffloor(float noundef %a) #0 {
; VENTUS-LABEL: test_ffloor:
; VENTUS:	    frrm	t0
; VENTUS-NEXT:	fsrmi	2
; VENTUS-NEXT:	vfcvt.x.f.v	v1, v0
; VENTUS-NEXT:	vfcvt.f.x.v	v1, v1
; VENTUS-NEXT:	fsrm	t0
entry:
  %call = call float @llvm.floor.f32(float noundef %a)
  ret float %call
}

define float @test_frint(float noundef %a) #0 {
; VENTUS-LABEL: test_frint:
; VENTUS:	    frrm	t0
; VENTUS-NEXT:	fsrmi	0
; VENTUS-NEXT:	vfcvt.x.f.v	v1, v0
; VENTUS-NEXT:	vfcvt.f.x.v	v1, v1
; VENTUS-NEXT:	fsrm	t0 
entry:
  %call = call float @llvm.rint.f32(float noundef %a)
  ret float %call
}


declare float @llvm.ceil.f32(float) #1
declare float @llvm.floor.f32(float) #1
declare float @llvm.rint.f32(float) #1


attributes #0 = { alwaysinline convergent mustprogress nofree norecurse nosync nounwind willreturn memory(none) vscale_range(1,2048) "disable-tail-calls"="true" "frame-pointer"="all" "min-legal-vector-width"="0" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="ventus-gpgpu" "target-features"="+32bit,+a,+m,+relax,+zdinx,+zfinx,+zhinx,+zve32f,+zve32x,+zvl32b,-64bit,-save-restore" }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
