; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv32 -mcpu=ventus-gpgpu -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=VENTUS %s

target datalayout = "e-m:e-p:32:32-i64:64-n32-S128"
target triple = "riscv32"

@MAX_FORMAT_STR_SIZE = dso_local global i32 64, align 4
@PRINT_BUFFER_ADDR = dso_local global ptr inttoptr (i32 -1878900736 to ptr), align 4

; Function Attrs: noinline nounwind optnone vscale_range(1,2048)
define dso_local i32 @printf(ptr noundef %fmt, ...) {
; VENTUS-LABEL: printf:
; VENTUS:       # %bb.0: # %entry
; VENTUS-NEXT:    addi sp, sp, 48
; VENTUS-NEXT:    addi tp, tp, 48
; VENTUS-NEXT:    .cfi_def_cfa_offset 48
; VENTUS-NEXT:    li a0, 0
; VENTUS-NEXT:    vsw.v v7, -44(tp)
; VENTUS-NEXT:    vsw.v v6, -40(tp)
; VENTUS-NEXT:    vsw.v v5, -36(tp)
; VENTUS-NEXT:    vsw.v v4, -32(tp)
; VENTUS-NEXT:    vsw.v v3, -28(tp)
; VENTUS-NEXT:    vsw.v v2, -24(tp)
; VENTUS-NEXT:    vsw.v v1, -20(tp)
; VENTUS-NEXT:    addi a1, tp, -16
; VENTUS-NEXT:    sw a1, -16(tp)
; VENTUS-NEXT:    vmv.x.s a1, v1
; VENTUS-NEXT:    lui a2, %hi(MAX_FORMAT_STR_SIZE)
; VENTUS-NEXT:    lui a3, %hi(PRINT_BUFFER_ADDR)
; VENTUS-NEXT:    lw a4, %lo(MAX_FORMAT_STR_SIZE)(a2)
; VENTUS-NEXT:    bge a0, a4, .LBB0_2
; VENTUS-NEXT:  .LBB0_1: # %for.body
; VENTUS-NEXT:    # =>This Inner Loop Header: Depth=1
; VENTUS-NEXT:    # kill: def $v1 killed $x10
; VENTUS-NEXT:    vadd.vx v1, v0, a0
; VENTUS-NEXT:    vmv.x.s a4, v1
; VENTUS-NEXT:    lw a5, %lo(PRINT_BUFFER_ADDR)(a3)
; VENTUS-NEXT:    lb a4, 0(a4)
; VENTUS-NEXT:    addi a6, a5, 1
; VENTUS-NEXT:    sw a6, %lo(PRINT_BUFFER_ADDR)(a3)
; VENTUS-NEXT:    sb a4, 0(a5)
; VENTUS-NEXT:    addi a0, a0, 1
; VENTUS-NEXT:    lw a4, %lo(MAX_FORMAT_STR_SIZE)(a2)
; VENTUS-NEXT:    blt a0, a4, .LBB0_1
; VENTUS-NEXT:  .LBB0_2: # %for.end
; VENTUS-NEXT:    vmv.v.x v0, a1
; VENTUS-NEXT:    addi sp, sp, -48
; VENTUS-NEXT:    addi tp, tp, -48
; VENTUS-NEXT:    ret
entry:
  %fmt.addr = alloca ptr, align 4
  %va = alloca ptr, align 4
  %v = alloca i32, align 4
  %i = alloca i32, align 4
  store ptr %fmt, ptr %fmt.addr, align 4
  call void @llvm.va_start(ptr %va)
  %argp.cur = load ptr, ptr %va, align 4
  %argp.next = getelementptr inbounds i8, ptr %argp.cur, i32 4
  store ptr %argp.next, ptr %va, align 4
  %0 = load i32, ptr %argp.cur, align 4
  store i32 %0, ptr %v, align 4
  store i32 0, ptr %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, ptr %i, align 4
  %2 = load i32, ptr @MAX_FORMAT_STR_SIZE, align 4
  %cmp = icmp slt i32 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load ptr, ptr %fmt.addr, align 4
  %incdec.ptr = getelementptr inbounds i8, ptr %3, i32 1
  store ptr %incdec.ptr, ptr %fmt.addr, align 4
  %4 = load i8, ptr %3, align 1
  %5 = load ptr, ptr @PRINT_BUFFER_ADDR, align 4
  %incdec.ptr1 = getelementptr inbounds i8, ptr %5, i32 1
  store ptr %incdec.ptr1, ptr @PRINT_BUFFER_ADDR, align 4
  store i8 %4, ptr %5, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, ptr %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, ptr %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @llvm.va_end(ptr %va)
  %7 = load i32, ptr %v, align 4
  ret i32 %7
}

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.va_start(ptr)

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.va_end(ptr)
