; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv32 -mcpu=ventus-gpgpu -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=VENTUS %s

target datalayout = "e-m:e-p:32:32-i64:64-n32-S128-A5-G1"
target triple = "riscv32"

; __builtin_va_list va;
; __builtin_va_start(va, fmt);
; __builtin_va_arg(va, int);
; __builtin_va_end(va)
; Function Attrs: noinline nounwind optnone vscale_range(1,2048)
define dso_local i32 @printf(ptr addrspace(2) noundef %fmt, ...) {
; VENTUS-LABEL: printf:
; VENTUS:       # %bb.0: # %entry
; VENTUS-NEXT:    addi tp, tp, 4
; VENTUS-NEXT:    .cfi_def_cfa_offset 4
; VENTUS-NEXT:    vmv.v.x v8, tp
; VENTUS-NEXT:    vsw.v v7, -4(v8)
; VENTUS-NEXT:    vsw.v v6, -8(v8)
; VENTUS-NEXT:    vsw.v v5, -12(v8)
; VENTUS-NEXT:    vsw.v v4, -16(v8)
; VENTUS-NEXT:    vsw.v v3, -20(v8)
; VENTUS-NEXT:    vsw.v v2, -24(v8)
; VENTUS-NEXT:    vsw.v v1, -28(v8)
; VENTUS-NEXT:    addi t0, tp, -36
; VENTUS-NEXT:    vmv.v.x v0, t0
; VENTUS-NEXT:    vsw.v v0, -4(v8)
; VENTUS-NEXT:    addi t0, tp, -32
; VENTUS-NEXT:    vmv.v.x v0, t0
; VENTUS-NEXT:    vsw.v v0, -4(v8)
; VENTUS-NEXT:    addi tp, tp, -4
; VENTUS-NEXT:    vmv.v.x v8, tp
; VENTUS-NEXT:    ret
entry:
  %retval = alloca i32, align 4, addrspace(5)
  %fmt.addr = alloca ptr addrspace(2), align 4, addrspace(5)
  %va = alloca ptr, align 4, addrspace(5)
  store ptr addrspace(2) %fmt, ptr addrspace(5) %fmt.addr, align 4
  %va1 = addrspacecast ptr addrspace(5) %va to ptr
  call void @llvm.va_start(ptr %va1)
  %argp.cur = load ptr, ptr addrspace(5) %va, align 4
  %argp.next = getelementptr inbounds i8, ptr %argp.cur, i32 4
  store ptr %argp.next, ptr addrspace(5) %va, align 4
  %0 = load i32, ptr %argp.cur, align 4
  %va2 = addrspacecast ptr addrspace(5) %va to ptr
  call void @llvm.va_end(ptr %va2)
  %1 = load i32, ptr addrspace(5) %retval, align 4
  ret i32 %1
}

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.va_start(ptr)

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.va_end(ptr)
