; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv32 -mcpu=ventus-gpgpu -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=VENTUS %s
; RUN: llc -mtriple=riscv32 -mcpu=ventus-gpgpu --filetype=obj < %s -o - | llvm-objdump -d - --mattr=+v,+zfinx \
; RUN:   | FileCheck -check-prefix=VENTUS-OBJ %s

;;
;; The start address of kernel arguments are stored in a0(a0, a1 if in 64 bit address space),
;; and aligned respectively according to data layout.
;;


; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write) vscale_range(1,2048)
define dso_local ventus_kernel void @foo(i32 noundef %a, i32 noundef %b, ptr addrspace(1) nocapture noundef writeonly align 4 %c) {
; VENTUS-LABEL: foo:
; VENTUS:       # %bb.0:
; VENTUS-NEXT:    lw t0, 0(a0)
; VENTUS-NEXT:    lw t1, 4(a0)
; VENTUS-NEXT:    lw t2, 8(a0)
; VENTUS-NEXT:    add t0, t1, t0
; VENTUS-NEXT:    sw t0, 0(t2)
; VENTUS-NEXT:    ret
  %add = add nsw i32 %b, %a
  store i32 %add, ptr addrspace(1) %c, align 4
  ret void
}

define dso_local ventus_kernel void @float_add(ptr addrspace(1) nocapture noundef writeonly align 4 %out, ptr addrspace(4) nocapture noundef readonly align 4 %in) {
; VENTUS-LABEL: float_add:
; VENTUS:       # %bb.0: # %entry
; VENTUS-NEXT:    lw t0, 4(a0)
; VENTUS-NEXT:    flw t0, 0(t0)
; VENTUS-NEXT:    lui t1, %hi(.LCPI1_0)
; VENTUS-NEXT:    flw t1, %lo(.LCPI1_0)(t1)
; VENTUS-NEXT:    fadd.s t0, t0, t1
; VENTUS-NEXT:    lw t1, 0(a0)
; VENTUS-NEXT:    fsw t0, 0(t1)
; VENTUS-OBJ:    lw      t1, 0(t1)
; VENTUS-OBJ:    fadd.s  t0, t0, t1
; VENTUS-NEXT:    ret

entry:
  %0 = load float, ptr addrspace(4) %in, align 4
  %add = fadd float %0, 1.200000e+01
  store float %add, ptr addrspace(1) %out, align 4
  ret void
}
