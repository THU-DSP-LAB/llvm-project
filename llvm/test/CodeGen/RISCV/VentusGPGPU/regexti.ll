; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv32 -mcpu=ventus-gpgpu -verify-machineinstrs < %s \
; RUN:   | FileCheck %s

define dso_local i32 @regexti1(i32 noundef %a) {
; CHECK-LABEL: regexti1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    regexti zero, zero, 768
; CHECK-NEXT:    vor.vi v0, v0, 15
; CHECK-NEXT:    ret
entry:
  %res = or i32 %a, 399
  ret i32 %res
}

define dso_local i32 @regexti2(i32 noundef %a) {
; CHECK-LABEL: regexti2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    regexti zero, zero, -832
; CHECK-NEXT:    vor.vi v0, v0, -15
; CHECK-NEXT:    ret
entry:
  %res = or i32 %a, -399
  ret i32 %res
}

define dso_local i32 @regexti1_1(i32 noundef %a) {
; CHECK-LABEL: regexti1_1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    regexti zero, zero, 0
; CHECK-NEXT:    vor.vi v0, v0, -15
; CHECK-NEXT:    ret
entry:
  %res = or i32 %a, 17
  ret i32 %res
}

define dso_local i32 @regexti2_1(i32 noundef %a) {
; CHECK-LABEL: regexti2_1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    regexti zero, zero, -64
; CHECK-NEXT:    vor.vi v0, v0, 15
; CHECK-NEXT:    ret
entry:
  %res = or i32 %a, -17
  ret i32 %res
}

define dso_local i32 @regexti1_2(i32 noundef %a) {
; CHECK-LABEL: regexti1_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vor.vi v0, v0, 13
; CHECK-NEXT:    ret
entry:
  %res = or i32 %a, 13
  ret i32 %res
}

define dso_local i32 @regexti2_2(i32 noundef %a) {
; CHECK-LABEL: regexti2_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vor.vi v0, v0, -13
; CHECK-NEXT:    ret
entry:
  %res = or i32 %a, -13
  ret i32 %res
}

define dso_local i32 @regexti3(i32 noundef %a) {
; CHECK-LABEL: regexti3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    regexti zero, zero, 768
; CHECK-NEXT:    vxor.vi v0, v0, 15
; CHECK-NEXT:    ret
entry:
  %res = xor i32 %a, 399
  ret i32 %res
}

define dso_local i32 @regexti4(i32 noundef %a) {
; CHECK-LABEL: regexti4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    regexti zero, zero, -832
; CHECK-NEXT:    vxor.vi v0, v0, -15
; CHECK-NEXT:    ret
entry:
  %res = xor i32 %a, -399
  ret i32 %res
}

define dso_local i32 @regexti5(i32 noundef %a) {
; CHECK-LABEL: regexti5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    regexti zero, zero, 768
; CHECK-NEXT:    vrsub.vi v0, v0, 15
; CHECK-NEXT:    ret
entry:
  %res = sub i32 399, %a
  ret i32 %res
}

define dso_local i32 @regexti6(i32 noundef %a) {
; CHECK-LABEL: regexti6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    regexti zero, zero, -832
; CHECK-NEXT:    vrsub.vi v0, v0, -15
; CHECK-NEXT:    ret
entry:
  %res = sub i32 -399, %a
  ret i32 %res
}

define dso_local i32 @regexti7(i32 noundef %a) {
; CHECK-LABEL: regexti7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    regexti zero, zero, 768
; CHECK-NEXT:    vand.vi v0, v0, 15
; CHECK-NEXT:    ret
entry:
  %res = and i32 %a, 399
  ret i32 %res
}

define dso_local i32 @regexti8(i32 noundef %a) {
; CHECK-LABEL: regexti8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    regexti zero, zero, -832
; CHECK-NEXT:    vand.vi v0, v0, -15
; CHECK-NEXT:    ret
entry:
  %res = and i32 %a, -399
  ret i32 %res
}

define dso_local i1 @regexti9(i32 noundef %a) {
; CHECK-LABEL: regexti9:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    regexti zero, zero, 768
; CHECK-NEXT:    vmseq.vi v0, v0, 15
; CHECK-NEXT:    ret
entry:
  %res = icmp eq i32 %a, 399
  ret i1 %res
}

define dso_local i1 @regexti10(i32 noundef %a) {
; CHECK-LABEL: regexti10:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    regexti zero, zero, -832
; CHECK-NEXT:    vmseq.vi v0, v0, -15
; CHECK-NEXT:    ret
entry:
  %res = icmp eq i32 %a, -399
  ret i1 %res
}

define dso_local i1 @regexti11(i32 noundef %a) {
; CHECK-LABEL: regexti11:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    regexti zero, zero, 768
; CHECK-NEXT:    vmsne.vi v0, v0, 15
; CHECK-NEXT:    ret
entry:
  %res = icmp ne i32 %a, 399
  ret i1 %res
}

define dso_local i1 @regexti12(i32 noundef %a) {
; CHECK-LABEL: regexti12:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    regexti zero, zero, -832
; CHECK-NEXT:    vmsne.vi v0, v0, -15
; CHECK-NEXT:    ret
entry:
  %res = icmp ne i32 %a, -399
  ret i1 %res
}

define dso_local ventus_kernel void @regexti13(ptr addrspace(1) nocapture noundef align 4 %A
; CHECK-LABEL: regexti13:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi sp, sp, 12
; CHECK-NEXT:    .cfi_def_cfa_offset 12
; CHECK-NEXT:    addi tp, tp, 4
; CHECK-NEXT:    .cfi_def_cfa_offset 4
; CHECK-NEXT:    regext zero, zero, 1
; CHECK-NEXT:    vmv.v.x v32, tp
; CHECK-NEXT:    sw ra, 0(sp) # 4-byte Folded Spill
; CHECK-NEXT:    .cfi_offset ra, 4
; CHECK-NEXT:    .cfi_offset v33.l, 0
; CHECK-NEXT:    lw t0, 0(a0)
; CHECK-NEXT:    sw t0, -8(sp) # 4-byte Folded Spill
; CHECK-NEXT:    lw t0, 4(a0)
; CHECK-NEXT:    sw t0, -4(sp) # 4-byte Folded Spill
; CHECK-NEXT:    vmv.v.x v0, zero
; CHECK-NEXT:    call _Z13get_global_idj
; CHECK-NEXT:    regexti zero, zero, 769
; CHECK-NEXT:    vand.vi v33, v0, 15
; CHECK-NEXT:    vmv.v.x v0, zero
; CHECK-NEXT:    call _Z12get_local_idj
; CHECK-NEXT:    vsll.vi v0, v0, 2
; CHECK-NEXT:    lw t1, -4(sp) # 4-byte Folded Reload
; CHECK-NEXT:    vadd.vx v0, v0, t1
; CHECK-NEXT:    vlw12.v v0, 0(v0)
; CHECK-NEXT:    regext zero, zero, 64
; CHECK-NEXT:    vsll.vi v1, v33, 2
; CHECK-NEXT:    lw t0, -8(sp) # 4-byte Folded Reload
; CHECK-NEXT:    vadd.vx v1, v1, t0
; CHECK-NEXT:    vlw12.v v2, 0(v1)
; CHECK-NEXT:    vadd.vv v0, v2, v0
; CHECK-NEXT:    vsw12.v v0, 0(v1)
; CHECK-NEXT:    lw ra, 0(sp) # 4-byte Folded Reload
; CHECK-NEXT:    addi sp, sp, -12
; CHECK-NEXT:    addi tp, tp, -4
; CHECK-NEXT:    ret
                                              ,ptr addrspace(3) nocapture noundef align 4 %B) {
entry:
  %call = tail call i32 @_Z13get_global_idj(i32 noundef 0)
  %calland = and i32 %call, 399
  %call1 = tail call i32 @_Z12get_local_idj(i32 noundef 0)
  %arrayidx = getelementptr inbounds i32, ptr addrspace(3) %B, i32 %call1
  %0 = load i32, ptr addrspace(3) %arrayidx, align 4
  %arrayidx2 = getelementptr inbounds i32, ptr addrspace(1) %A, i32 %calland
  %1 = load i32, ptr addrspace(1) %arrayidx2, align 4
  %add = add nsw i32 %1, %0
  store i32 %add, ptr addrspace(1) %arrayidx2, align 4
  ret void
}

declare dso_local i32 @_Z13get_global_idj(i32 noundef)
declare dso_local i32 @_Z12get_local_idj(i32 noundef)
